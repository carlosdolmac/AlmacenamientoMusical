/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

package view;

import com.formdev.flatlaf.FlatClientProperties;
import controller.HibernateHelper;
import controller.MensajesInternacionales;
import controller.PrincipalController;
import java.awt.Color;
import java.util.List;
import javax.swing.JOptionPane;

/**
 * Panel para añadir una nueva canción.
 * 
 * @author Carlos de los Dolores Macías
 */
public class AnadirCancion1 extends javax.swing.JPanel {
    HibernateHelper hibernateHelper = new HibernateHelper();
    private PrincipalController principalController;
    
    /**
     * Constructor de la clase AnadirCancion1.
     * @param principalController Controlador principal de la interfaz.
     */
    public AnadirCancion1(PrincipalController principalController) {
        initComponents();
        this.principalController = principalController;
        labelBiblioteca.putClientProperty( "FlatLaf.styleClass", "h1" );
        labelListaCanciones.putClientProperty( "FlatLaf.styleClass", "h1" );
        labelAnadirCancion.putClientProperty( "FlatLaf.styleClass", "h1" );
        artista.putClientProperty( FlatClientProperties.PLACEHOLDER_TEXT, "Selena Gomez" ); //Placeholder
        nombreCancion.putClientProperty( FlatClientProperties.PLACEHOLDER_TEXT, "Who Says" ); //Placeholder
        
        // Cargar playlists desde la base de datos
        cargarPlaylists();
        
        //Titulos
        labelBiblioteca.setText(MensajesInternacionales.obtenerMensaje("label.biblioteca"));
        labelListaCanciones.setText(MensajesInternacionales.obtenerMensaje("label.listacanciones"));
        labelArtista.setText(MensajesInternacionales.obtenerMensaje("label.artista"));
        labelNombre.setText(MensajesInternacionales.obtenerMensaje("label.nombrecancion"));
        labelPlaylistOpcional.setText(MensajesInternacionales.obtenerMensaje("label.playlistopcional"));
        guardarCancion.setText(MensajesInternacionales.obtenerMensaje("button.anadircancion"));
    }
    
    /**
     * Carga la lista de playlists desde la base de datos y la presenta en el JComboBox de la interfaz.
     */
    private void cargarPlaylists() {
        // Obtener la lista de playlists desde la base de datos
        List<String> playlists = hibernateHelper.obtenerNombresPlaylists();

        // Limpiar el JComboBox
        playlist.removeAllItems();

        // Agregar las playlists al JComboBox
        for (String playlistNombre : playlists) {
            playlist.addItem(playlistNombre);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fondoAnadirCancionAPlaylist = new javax.swing.JPanel();
        labelBiblioteca = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        labelListaCanciones = new javax.swing.JLabel();
        labelAnadirCancion = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        labelNombre = new javax.swing.JLabel();
        nombreCancion = new javax.swing.JTextField();
        guardarCancion = new javax.swing.JButton();
        artista = new javax.swing.JTextField();
        labelArtista = new javax.swing.JLabel();
        labelPlaylistOpcional = new javax.swing.JLabel();
        playlist = new javax.swing.JComboBox<>();

        fondoAnadirCancionAPlaylist.setBackground(new java.awt.Color(244, 246, 248));

        labelBiblioteca.setForeground(new java.awt.Color(153, 153, 153));
        labelBiblioteca.setText("Biblioteca");
        labelBiblioteca.setToolTipText("Te lleva a la biblioteca");
        labelBiblioteca.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        labelBiblioteca.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelBibliotecaMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                labelBibliotecaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                labelBibliotecaMouseExited(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/mayor.png"))); // NOI18N

        labelListaCanciones.setForeground(new java.awt.Color(153, 153, 153));
        labelListaCanciones.setText("Lista de Canciones");
        labelListaCanciones.setToolTipText("Te lleva a la lista de canciones");
        labelListaCanciones.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        labelListaCanciones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelListaCancionesMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                labelListaCancionesMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                labelListaCancionesMouseExited(evt);
            }
        });

        labelAnadirCancion.setText("Añadir Canción");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/mayor.png"))); // NOI18N

        labelNombre.setText("Nombre de la canción");

        nombreCancion.setBackground(new java.awt.Color(244, 246, 248));
        nombreCancion.setPreferredSize(new java.awt.Dimension(340, 38));
        nombreCancion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nombreCancionKeyPressed(evt);
            }
        });

        guardarCancion.setBackground(new java.awt.Color(139, 243, 204));
        guardarCancion.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        guardarCancion.setText("Guardar Canción");
        guardarCancion.setToolTipText("Pulsa para guardar la canción");
        guardarCancion.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        guardarCancion.setPreferredSize(new java.awt.Dimension(162, 46));
        guardarCancion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarCancionActionPerformed(evt);
            }
        });

        artista.setBackground(new java.awt.Color(244, 246, 248));
        artista.setPreferredSize(new java.awt.Dimension(340, 38));

        labelArtista.setText("Artista");

        labelPlaylistOpcional.setText("Playlist (Opcional)");

        playlist.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {})
        );
        playlist.setToolTipText("Puedes no seleccionar una Playlist");
        playlist.setPreferredSize(new java.awt.Dimension(340, 38));

        javax.swing.GroupLayout fondoAnadirCancionAPlaylistLayout = new javax.swing.GroupLayout(fondoAnadirCancionAPlaylist);
        fondoAnadirCancionAPlaylist.setLayout(fondoAnadirCancionAPlaylistLayout);
        fondoAnadirCancionAPlaylistLayout.setHorizontalGroup(
            fondoAnadirCancionAPlaylistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fondoAnadirCancionAPlaylistLayout.createSequentialGroup()
                .addGroup(fondoAnadirCancionAPlaylistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fondoAnadirCancionAPlaylistLayout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(fondoAnadirCancionAPlaylistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(fondoAnadirCancionAPlaylistLayout.createSequentialGroup()
                                .addComponent(labelBiblioteca)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1)
                                .addGap(20, 20, 20)
                                .addComponent(labelListaCanciones)
                                .addGap(27, 27, 27)
                                .addComponent(jLabel2)
                                .addGap(17, 17, 17)
                                .addComponent(labelAnadirCancion))
                            .addGroup(fondoAnadirCancionAPlaylistLayout.createSequentialGroup()
                                .addGroup(fondoAnadirCancionAPlaylistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelNombre)
                                    .addComponent(nombreCancion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(205, 205, 205)
                                .addGroup(fondoAnadirCancionAPlaylistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelArtista)
                                    .addComponent(artista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(fondoAnadirCancionAPlaylistLayout.createSequentialGroup()
                        .addGap(420, 420, 420)
                        .addComponent(guardarCancion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(fondoAnadirCancionAPlaylistLayout.createSequentialGroup()
                        .addGap(331, 331, 331)
                        .addGroup(fondoAnadirCancionAPlaylistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelPlaylistOpcional)
                            .addComponent(playlist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(58, Short.MAX_VALUE))
        );
        fondoAnadirCancionAPlaylistLayout.setVerticalGroup(
            fondoAnadirCancionAPlaylistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fondoAnadirCancionAPlaylistLayout.createSequentialGroup()
                .addGroup(fondoAnadirCancionAPlaylistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fondoAnadirCancionAPlaylistLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(labelBiblioteca)
                        .addGap(61, 61, 61)
                        .addComponent(labelNombre)
                        .addGap(18, 18, 18)
                        .addComponent(nombreCancion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(fondoAnadirCancionAPlaylistLayout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jLabel1))
                    .addGroup(fondoAnadirCancionAPlaylistLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(labelListaCanciones))
                    .addGroup(fondoAnadirCancionAPlaylistLayout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jLabel2))
                    .addGroup(fondoAnadirCancionAPlaylistLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(labelAnadirCancion))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fondoAnadirCancionAPlaylistLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(labelArtista)
                        .addGap(18, 18, 18)
                        .addComponent(artista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(labelPlaylistOpcional)
                .addGap(18, 18, 18)
                .addComponent(playlist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(guardarCancion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(228, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fondoAnadirCancionAPlaylist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fondoAnadirCancionAPlaylist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Maneja los eventos del mouse y del teclado para la interfaz de usuario relacionados con la gestión de canciones.
     */
    private void labelListaCancionesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelListaCancionesMouseClicked
        principalController.mostrarListaDeCanciones();
    }//GEN-LAST:event_labelListaCancionesMouseClicked

    /**
     * Cambia el color del texto cuando el mouse entra en la etiqueta de Lista de Canciones.
     */
    private void labelListaCancionesMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelListaCancionesMouseEntered
        labelListaCanciones.setForeground(Color.black);
    }//GEN-LAST:event_labelListaCancionesMouseEntered
    
    /**
      * Restaura el color del texto cuando el mouse sale de la etiqueta de Lista de Canciones.
      */
    private void labelListaCancionesMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelListaCancionesMouseExited
        labelListaCanciones.setForeground(Color.GRAY);
    }//GEN-LAST:event_labelListaCancionesMouseExited

    /**
     * Maneja el evento de clic en la etiqueta de Biblioteca, mostrando la biblioteca de canciones.
     */
    private void labelBibliotecaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelBibliotecaMouseClicked
        principalController.mostrarBiblioteca();
    }//GEN-LAST:event_labelBibliotecaMouseClicked

    /**
     * Cambia el color del texto cuando el mouse entra en la etiqueta de Biblioteca.
     */
    private void labelBibliotecaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelBibliotecaMouseEntered
        labelBiblioteca.setForeground(Color.black);
    }//GEN-LAST:event_labelBibliotecaMouseEntered

    /**
     * Restaura el color del texto cuando el mouse sale de la etiqueta de Biblioteca.
     */
    private void labelBibliotecaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelBibliotecaMouseExited
        labelBiblioteca.setForeground(Color.gray);
    }//GEN-LAST:event_labelBibliotecaMouseExited

    /**
     * Maneja la acción de guardar una nueva canción.
     */
    private void guardarCancionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarCancionActionPerformed
        String nombreCancionAdd = nombreCancion.getText();
        String artistaAdd = artista.getText();
        String playlistSeleccionada = (String) playlist.getSelectedItem();

        try {
            Integer idPlaylist = null;

            if (playlistSeleccionada != null && !playlistSeleccionada.equals("null")) {
                // Solo intentar obtener el ID si la playlist seleccionada no es "null"
                idPlaylist = hibernateHelper.obtenerIdPlaylistPorNombre(playlistSeleccionada);
            }

            // Llamar al método del controlador para guardar la canción
            hibernateHelper.agregarCancion(nombreCancionAdd, idPlaylist, artistaAdd);

            // Limpiar campos después de agregar la canción
            nombreCancion.setText("");
            artista.setText("");
            playlist.setSelectedIndex(0); // Esto establecerá la selección en la primera opción (posiblemente "null")

            // Mostrar mensaje de éxito
            JOptionPane.showMessageDialog(this, "Canción agregada exitosamente.");

        } catch (Exception e) {
            e.printStackTrace();

            // Mostrar mensaje de error general
            JOptionPane.showMessageDialog(this, "Error al agregar la canción. Por favor, inténtalo de nuevo.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_guardarCancionActionPerformed

    /**
     * Maneja el evento de presionar una tecla en el campo de nombre de la canción, activando la acción de guardar al presionar Enter.
     */
    private void nombreCancionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreCancionKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            guardarCancionActionPerformed(new java.awt.event.ActionEvent(this, 0, ""));
        }
    }//GEN-LAST:event_nombreCancionKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField artista;
    private javax.swing.JPanel fondoAnadirCancionAPlaylist;
    private javax.swing.JButton guardarCancion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel labelAnadirCancion;
    private javax.swing.JLabel labelArtista;
    private javax.swing.JLabel labelBiblioteca;
    private javax.swing.JLabel labelListaCanciones;
    private javax.swing.JLabel labelNombre;
    private javax.swing.JLabel labelPlaylistOpcional;
    private javax.swing.JTextField nombreCancion;
    private javax.swing.JComboBox<String> playlist;
    // End of variables declaration//GEN-END:variables

}
